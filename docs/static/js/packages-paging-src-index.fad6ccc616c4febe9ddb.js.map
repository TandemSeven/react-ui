{"version":3,"sources":["webpack:///./packages/paging/src/index.css","webpack:///./packages/paging/src/index.css?d3ca","webpack:///./packages/paging/src/icons/arrow_right.js","webpack:///./packages/paging/src/utils/throttle.js","webpack:///./packages/paging/src/components/pager_item.js","webpack:///./packages/paging/src/index.js","webpack:///./packages/paging/src/index.mdx"],"names":["module","exports","__webpack_require__","push","i","content","options","hmr","transform","insertInto","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","ArrowRightIcon","props","_props$color","color","_props$title","title","_props$description","description","className","react_default","createElement","Object","assign","width","height","viewBox","xmlns","fill","fillRule","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","throttle","type","name","obj","arguments","length","window","running","addEventListener","requestAnimationFrame","dispatchEvent","CustomEvent","PagerItem","_this$props","_this","onClick","pageIndex","PureComponent","_this$props2","this","selected","disabled","children","ellipsis","classes","classNames","t7-react-paging__item","t7-react-paging__item-selected","t7-react-paging__item-ellipsis","t7-react-paging__item-disabled","react","handleClick","Paging","calculatedMaxButtons","index","dispatchPageChanged","onPageChanged","pagerItems","container","getElementsByClassName","margin","getComputedStyle","marginString","marginLeft","parseInt","split","error","pagerItemWidth","clientWidth","setState","_this$container$offse","offsetWidth","containerWidth","Math","floor","currentPageIndex","pageSize","totalItems","propmaxButtons","maxButtons","autoLayout","state","maxPagerItems","max","maxPages","ceil","showArrows","count","min","centerAdjust","start","pageData","Array","map","item","array","proposed","data-test-id","ref","element","pager_item_PagerItem","handlePageItemClick","arrow_right","fitPagerButtonsToWidth","removeEventListener","newProps","proposedPageIndex","MDXContent","paging_src_classCallCheck","paging_src_possibleConstructorReturn","paging_src_getPrototypeOf","call","layout","React","Component","components","_objectWithoutProperties","dist","id","index_m","of","__position","__code","__scope","Pager","console","log"],"mappings":"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","file":"static/js/packages-paging-src-index.f490de1c.js","sourcesContent":["exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".t7-react-paging{display:flex}.t7-react-paging__arrow--previous{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.t7-react-paging__item{border:3px;display:flex;min-height:38px;min-width:36px;font-size:14px;justify-content:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline-style:none}.t7-react-paging__item:hover{font-weight:700}.t7-react-paging__item:not(:first-of-type){margin-left:var(--sp-10)}.t7-react-paging__item-selected{border:3px solid #000}.t7-react-paging__item-ellipsis{border:none}.t7-react-paging__item-disabled{opacity:.5;pointer-events:none}\", \"\"]);\n\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/postcss-loader/src/index.js!./index.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/postcss-loader/src/index.js!./index.css\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/postcss-loader/src/index.js!./index.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst ArrowRightIcon = (props) => {\n  const {\n    color = '#000',\n    title = 'arrow right icon',\n    description = 'arrow right icon',\n    className\n  } = props\n\n  return (\n    <svg\n      width='7'\n      height='11'\n      viewBox='0 0 7 11'\n      className={className}\n      xmlns='http://www.w3.org/2000/svg'\n      {...props}\n    >\n      <title>{title}</title>\n      <desc>{description}</desc>\n      <path\n        fill='none'\n        fillRule='evenodd'\n        stroke={color}\n        strokeLinecap='round'\n        strokeLinejoin='round'\n        strokeWidth='1.5'\n        d='M1 1l4.5 4.5L1 10'\n      />\n    </svg>\n  )\n}\n\nArrowRightIcon.propTypes = {\n  color: PropTypes.string,\n  title: PropTypes.string,\n  description: PropTypes.string,\n  className: PropTypes.string\n}\n\nexport default ArrowRightIcon\n","const throttle = (type, name, obj = window) => {\n  let running = false\n\n  const func = () => {\n    if (running) {\n      return\n    }\n\n    running = true\n\n    requestAnimationFrame(() => {\n      obj.dispatchEvent(new CustomEvent(name))\n      running = false\n    })\n  }\n\n  obj.addEventListener(type, func)\n}\n\nexport default throttle\n","import React, { PureComponent, Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport default class PagerItem extends PureComponent {\n  handleClick = () => {\n    const { onClick, pageIndex } = this.props\n    if (typeof onClick === 'function') {\n      onClick(pageIndex)\n    }\n  };\n\n  render () {\n    const { selected, disabled, children, ellipsis } = this.props\n    const classes = classNames({\n      't7-react-paging__item': true,\n      't7-react-paging__item-selected': selected,\n      't7-react-paging__item-ellipsis': ellipsis,\n      't7-react-paging__item-disabled': disabled\n    })\n\n    return (<Fragment>\n      <button disabled={disabled} className={classes} onClick={this.handleClick}>\n        {children}\n      </button>\n    </Fragment>)\n  }\n\n  static propTypes = {\n    pageIndex: PropTypes.number,\n    selected: PropTypes.bool,\n    disabled: PropTypes.bool,\n    ellipsis: PropTypes.bool,\n    onClick: PropTypes.func,\n    children: PropTypes.oneOfType([PropTypes.element, PropTypes.node])\n  }\n\n  static defaultProps = {\n    disabled: false,\n    ellipsis: false,\n    selected: false\n  }\n}\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport ArrowRightIcon from './icons/arrow_right'\nimport throttle from './utils/throttle'\nimport classNames from 'classnames'\nimport './index.css'\nimport PagerItem from './components/pager_item'\n\nclass Paging extends PureComponent {\n  state = {\n    calculatedMaxButtons: 0\n  }\n\n  handlePageItemClick = (index) => {\n    const { pageIndex } = this.props\n\n    if (pageIndex !== index) {\n      this.dispatchPageChanged(index)\n    }\n  }\n\n  dispatchPageChanged = (index) => {\n    const { onPageChanged } = this.props\n\n    if (typeof onPageChanged === 'function') {\n      onPageChanged(index)\n    }\n  }\n\n  componentDidMount () {\n    const { autoLayout } = this.props\n\n    if (autoLayout) {\n      this.fitPagerButtonsToWidth()\n      throttle('resize', 'optimizedResize')\n\n      // Auto-fit when resized\n      window.addEventListener('optimizedResize', this.fitPagerButtonsToWidth)\n    }\n  }\n\n  componentWillUnmount () {\n    const { autoLayout } = this.props\n\n    if (autoLayout) {\n      window.removeEventListener('optimizedResize', this.fitPagerButtonsToWidth)\n    }\n  }\n\n  componentWillReceiveProps (newProps) {\n    const { pageIndex } = this.props\n    const { pageIndex: proposedPageIndex } = newProps\n\n    if (pageIndex !== proposedPageIndex) {\n      this.dispatchPageChanged(proposedPageIndex)\n    }\n  }\n\n  fitPagerButtonsToWidth = () => {\n    const pagerItems = this.container.getElementsByClassName(\n      't7-react-paging__item'\n    )\n\n    if (pagerItems && pagerItems.length) {\n      // Fit to width\n      // Margin defaults to 10 which corresponds to the css class, as a backup\n      let margin = 10\n\n      try {\n        if (window.getComputedStyle && pagerItems.length > 1) {\n          const marginString = getComputedStyle(pagerItems[1]).marginLeft\n\n          if (marginString) {\n            margin = parseInt(marginString.split('px')[0], 10)\n          }\n        }\n      } catch (error) {\n        // Cannot get computed style, will use default\n      }\n\n      const pagerItemWidth = pagerItems[0].clientWidth + margin\n\n      // Reset children and re-calculate\n      this.setState({ calculatedMaxButtons: 0 })\n      const { offsetWidth: containerWidth = 0 } = this.container\n\n      // Wait for redraw\n      requestAnimationFrame(() => {\n        const calculatedMaxButtons =\n          Math.floor(containerWidth / pagerItemWidth) - 2 // 2 is for prev/next buttons\n\n        this.setState({ calculatedMaxButtons })\n      })\n    }\n  }\n\n  render = () => {\n    const {\n      pageIndex: currentPageIndex,\n      pageSize,\n      totalItems,\n      maxButtons: propmaxButtons,\n      className,\n      autoLayout\n    } = this.props\n\n    const classes = classNames('t7-react-paging', className)\n\n    const { calculatedMaxButtons } = this.state\n\n    let maxPagerItems = 0\n\n    // If calculated, use that value, else use manual value\n    if (autoLayout) {\n      // Ensure there are at least 3 items\n      maxPagerItems = Math.max(calculatedMaxButtons, 3)\n    } else {\n      maxPagerItems = propmaxButtons\n    }\n\n    const maxPages = Math.max(Math.ceil(totalItems / pageSize), 1)\n\n    // If there are more pages than the max pager items, use prev/next arrows\n    const showArrows = maxPages > maxPagerItems\n\n    // Always take the lowest amount of pager items necessary\n    const count = Math.min(maxPages, maxPagerItems)\n\n    // If the number of pager items is even or very low, set an offset for the middle number\n    let centerAdjust = 0\n\n    if (maxPagerItems % 2 === 0 || maxPagerItems < 6) {\n      centerAdjust = 1\n    }\n\n    // Determine the first number of the pager\n    const start = Math.min(\n      Math.max(0, maxPages - maxPagerItems),\n      Math.max(\n        0,\n        currentPageIndex - Math.floor(maxPagerItems / 2) + centerAdjust\n      )\n    )\n\n    // Create an array of {count} length\n    const pageData = Array(count)\n      .fill()\n      .map((item, index, array) => {\n        const proposed = Math.min(start + index, maxPages)\n        const { length } = array\n\n        if (index < length - 2) {\n          // At least 2 away from max\n          return { pageIndex: proposed }\n        } else if (index <= length - 2) {\n          // 2nd to last shows ellipsis, unless we are in the last set\n          if (maxPages - start === maxPagerItems || maxPages < maxPagerItems) {\n            return { pageIndex: proposed }\n          }\n          // This is the 2nd to last item, show an ellipsis\n\n          return { ellipsis: true }\n        }\n\n        // Always show the last page\n        return { pageIndex: maxPages - 1 }\n      })\n\n    return (\n      <div\n        className={classes}\n        data-test-id='pagination-control'\n        ref={(element) => { (this.container = element) }}\n      >\n        {showArrows && (\n          <PagerItem\n            onClick={this.handlePageItemClick}\n            disabled={currentPageIndex === 0}\n            pageIndex={Math.max(currentPageIndex - 1, 0)}\n            data-test-id='pager-button-previous'\n          >\n            <ArrowRightIcon name='arrowRight' width={5} height={9} className='t7-react-paging__arrow--previous' />\n          </PagerItem>\n        )}\n        {count > 1\n          ? pageData.map((item, index) => {\n            const { ellipsis, pageIndex } = item\n\n            return (\n              <PagerItem\n                key={index}\n                selected={pageIndex === currentPageIndex}\n                onClick={!ellipsis ? this.handlePageItemClick : null}\n                pageIndex={pageIndex}\n                ellipsis={ellipsis}\n                data-test-id='pager-button'\n              >\n                {<span>{!ellipsis ? pageIndex + 1 : '...'}</span>}\n              </PagerItem>\n            )\n          })\n          : null}\n        {showArrows && (\n          <PagerItem\n            onClick={this.handlePageItemClick}\n            disabled={currentPageIndex === maxPages - 1}\n            pageIndex={Math.min(currentPageIndex + 1, maxPages - 1)}\n            data-test-id='pager-button-next'\n          >\n            <ArrowRightIcon name='arrowRight' width={5} height={9} className='t7-react-paging__arrow--next' />\n          </PagerItem>\n        )}\n      </div>\n    )\n  }\n\n  static propTypes = {\n    /* eslint-disable-line */\n    /** The 0-based index of the currently visible page */\n    pageIndex: PropTypes.number,\n\n    /** The number of items to render per page */\n    pageSize: PropTypes.number,\n\n    /** The total number of items */\n    totalItems: PropTypes.number,\n\n    /** When a page index changes, this is called, will fire a PageChangedEvent */\n    onPageChanged: PropTypes.func,\n\n    /** The maximum number of page buttons/controls to show, does not include next/previous buttons */\n    maxButtons: PropTypes.number,\n\n    /** If true, the number of pager buttons will fit the container width */\n    autoLayout: PropTypes.bool,\n\n    className: PropTypes.string\n  }\n\n  static defaultProps = {\n    // By default, will calculate how many paging items to use\n    autoLayout: true,\n    pageSize: 5,\n    maxButtons: 5,\n    totalItems: 0,\n    pageIndex: 0\n  }\n}\n\nexport default Paging\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz'\nimport Paging from './'\n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"t7paging\"}}>{`@t7/paging`}</MDXTag>\n<PropsTable of={Paging} />\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"basic-usage\"}}>{`Basic Usage`}</MDXTag>\n<Playground __position={1} __code={'<Pager\\n  className=\\\"m-t-100 w-100%\\\"\\n  pageIndex={0}\\n  maxButtons={10}\\n  autoLayout={true}\\n  pageSize={10}\\n  totalItems={10}\\n  onPageChanged={() => {\\n    console.log(\\'page changed\\')\\n  }}\\n/>'} __scope={{props: this ? this.props : props,Paging}}>\n  <Pager\n    className=\"m-t-100 w-100%\"\n    pageIndex={0}\n    maxButtons={10}\n    autoLayout={true}\n    pageSize={10}\n    totalItems={10}\n    onPageChanged={() => {\n      console.log(\"page changed\")\n    }}\n  />\n</Playground>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}