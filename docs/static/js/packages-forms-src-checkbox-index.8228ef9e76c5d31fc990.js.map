{"version":3,"sources":["webpack:///./packages/forms/src/checkbox/checkbox.js","webpack:///./packages/forms/src/checkbox/index.mdx"],"names":["Checkbox","props","_this","_classCallCheck","this","_getPrototypeOf","call","bind","_assertThisInitialized","defaultState","React","Component","arguments","length","undefined","state","checked","oldChecked","newState","exists","_this$props","_this$props$id","id","unique","e","_e$currentTarget","currentTarget","el","_el$value","value","setState","handleChange","_this$state","_this$props2","autofocus","classNameForInput","classNameForLabel","disabled","label","name","required","type","styleForInput","styleForLabel","isRadio","propsForLabel","htmlFor","style","className","trim","join","propsForSpan","aria-hidden","propsForInput","autoFocus","onChange","onFocus","defaultChecked","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","defaultProps","MDXContent","_possibleConstructorReturn","layout","components","_objectWithoutProperties","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","docz__WEBPACK_IMPORTED_MODULE_2__","of","parentName"],"mappings":"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","file":"static/js/packages-forms-src-checkbox-index.ac51f7ba.js","sourcesContent":["// Dependencies.\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\n// Utility methods.\nimport {\n  bind,\n  exists,\n  trim,\n  unique\n} from '@t7/utils'\n\n// Define class.\nclass Checkbox extends React.Component {\n  constructor (props) {\n    // Pass `props` into scope.\n    super(props)\n\n    // Bind context.\n    bind(this)\n\n    // Get default state.\n    this.defaultState()\n  }\n\n  // Set default state.\n  defaultState () {\n    // Props.\n    const {\n      checked,\n      id = unique()\n    } = this.props\n\n    this.state = {\n      id,\n      checked: !!checked,\n      oldChecked: checked\n    }\n  }\n\n  // Update state.\n  static getDerivedStateFromProps (props = {}, state = {}) {\n    // Props.\n    const { checked } = props\n\n    // State.\n    const { oldChecked } = state\n\n    // Set in conditional.\n    let newState = null\n\n    // Update?\n    if (\n      exists(checked) &&\n      checked !== oldChecked\n    ) {\n      newState = {\n        checked,\n        oldChecked: checked\n      }\n    }\n\n    // Expose object.\n    return newState\n  }\n\n  // Change event.\n  handleChange (e = {}) {\n    // Get element.\n    const {\n      currentTarget: el = {}\n    } = e\n\n    // Get value.\n    const {\n      checked,\n      value = ''\n    } = el\n\n    this.setState({\n      checked: !!checked\n    })\n\n    // Callback.\n    this.props.handleChange(e, value, checked)\n  }\n\n  // Render method.\n  render () {\n    // State.\n    const {\n      checked,\n      id\n    } = this.state\n\n    // Props\n    const {\n      autofocus,\n      classNameForInput,\n      classNameForLabel,\n      disabled,\n      label,\n      name,\n      required,\n      type,\n      value,\n      styleForInput,\n      styleForLabel\n    } = this.props\n\n    // Events.\n    const { handleChange } = this\n\n    // Is radio?\n    const isRadio = (\n      type === 'radio'\n    )\n\n    // Props for label.\n    const propsForLabel = {\n      htmlFor: id,\n      style: styleForLabel,\n\n      // Build class name.\n      className: trim(\n        [\n          isRadio\n            ? 't7-radio__label'\n            : 't7-checkbox__label',\n          classNameForLabel\n        ].join(' ')\n      )\n    }\n\n    // Props for span.\n    const propsForSpan = {\n      'aria-hidden': true,\n      style: styleForInput,\n\n      // Build class name.\n      className: trim(\n        [\n          isRadio\n            ? 't7-radio__fake'\n            : 't7-checkbox__fake',\n          classNameForInput\n        ].join(' ')\n      )\n    }\n\n    // Props for input.\n    const propsForInput = {\n      disabled,\n      id,\n      name,\n      required,\n      type,\n      value,\n      autoFocus: autofocus,\n      onChange: handleChange,\n      onFocus: handleChange,\n\n      // Build class name.\n      className: (\n        isRadio\n          ? 't7-radio'\n          : 't7-checkbox'\n      )\n    }\n\n    // Radio?\n    if (type === 'radio') {\n      propsForInput.defaultChecked = checked\n\n    // Checkbox?\n    } else {\n      propsForInput.checked = checked\n    }\n\n    // Expose UI.\n    return (\n      <label {...propsForLabel}>\n\n        <input\n          {...propsForInput}\n        />\n\n        <span\n          {...propsForSpan}\n        />\n\n        {label}\n\n      </label>\n    )\n  }\n}\n\n// Validation.\nCheckbox.propTypes = {\n  autofocus: PropTypes.bool,\n  classNameForInput: PropTypes.string,\n  classNameForLabel: PropTypes.string,\n  disabled: PropTypes.bool,\n  id: PropTypes.string,\n  label: PropTypes.string,\n  name: PropTypes.string,\n  required: PropTypes.bool,\n  type: PropTypes.string,\n  styleForInput: PropTypes.object,\n  styleForLabel: PropTypes.object,\n\n  // Alphanumeric.\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number\n  ]),\n\n  // Control checked state.\n  checked: PropTypes.bool,\n\n  // Events.\n  handleChange: PropTypes.func\n}\n\n// Prop defaults.\nCheckbox.defaultProps = {\n  type: 'checkbox',\n\n  // Events.\n  handleChange: () => {}\n}\n\n// Export.\nexport default Checkbox\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz'\nimport Checkbox from './checkbox'\n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"t7formscheckbox\"}}>{`@t7/forms/checkbox`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"props\"}}>{`Props`}</MDXTag>\n<PropsTable of={Checkbox} />\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"usage\"}}>{`Usage`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`import { Checkbox } from '@t7/forms'\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This component has custom UI, but fuctions like a regular `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<input>`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It accepts the following `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`props`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// Default: none.\nconst autofocus = true\n\n// Default: none.\nconst disabled = true\n\n// Ensured unique, if blank.\nconst id = 'string'\n\n// Default: none.\nconst label = 'Radio label'\n\n// Default: none.\nconst name = 'string'\n\n// Default: none.\nconst required = true\n\n// Default: none.\nconst value = 'string'\n\n// Default: false.\nconst checked = true\n\n// Event callback.\nconst handleChange = (e, value, checked) => {\n  /*\n    \\`e\\` = browser event.\n\n    \\`value\\` = string value of the input.\n\n    \\`checked\\` is a boolean.\n  */\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`<Checkbox\n  autofocus={autofocus}\n  checked={checked}\n  disabled={disabled}\n  id={id}\n  label={label}\n  name={name}\n  required={required}\n  value={value}\n\n  // Events.\n  handleChange={handleChange}\n/>\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}