{"version":3,"sources":["webpack:///./packages/image/src/index.js","webpack:///./packages/image/src/index.mdx"],"names":["OBSERVERS","WeakMap","REACT_MAP","Image","props","_this","_classCallCheck","this","_getPrototypeOf","call","bind","_assertThisInitialized","image","React","createRef","preloader","window","preservedStyle","Component","set","current","getIntersectionObserver","root","rootMargin","thresholds","observe","addEventListeners","unobserve","removeEventListeners","delete","prevProps","arguments","length","undefined","src","prevIntersectionObserver","intersectionObserver","addEventListener","onPreloaderLoad","onPreloaderError","removeEventListener","onImageLoad","fallback","event","style","backgroundImage","onLoad","onFallback","type","target","bg1","concat","placeholder","both","join","onIntersection","width","height","w","Number","h","_ref","base","Node","has","c","get","strMargin","String","normalizedThresholds","Array","trim","split","map","threshold","strThresholds","options","IntersectionObserver","forEach","entry","intersectionRatio","propsForImage","getPreloaderSrc","alt","ref","react_default","a","createElement","defaultProps","MDXContent","src_classCallCheck","src_possibleConstructorReturn","src_getPrototypeOf","layout","_this$props","components","_objectWithoutProperties","dist","name","id","index_m","of","__position","__code","__scope","image_src","background","console","log"],"mappings":"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","file":"static/js/packages-image-src-index.9a4613c2.js","sourcesContent":["// Dependencies.\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\n// Utility methods.\nimport { bind } from '@t7/utils'\n\n// Cached obervers.\nconst OBSERVERS = new WeakMap()\nconst REACT_MAP = new WeakMap()\n\n/**\n * The `<Image>` component displays an\n * image when it is nearly/fully visible.\n *\n * @typedef {Object} Image\n */\nclass Image extends React.Component {\n  constructor (props) {\n    // Pass `props` into scope.\n    super(props)\n\n    // Bind context.\n    bind(this)\n\n    /**\n     * The primary image.\n     *\n     * @member {Image} image\n    */\n    this.image = React.createRef()\n\n    /**\n     * The preloader image.\n     *\n     * @member {Image} preloader.\n    */\n    this.preloader = new window.Image()\n\n    /**\n     * Styles temporarily overridden on the image.\n     *\n     * @member {Object} preservedStyle\n    */\n    this.preservedStyle = {}\n  }\n\n  /**\n   * First mount.\n   */\n  componentDidMount () {\n    // Map element to instance.\n    REACT_MAP.set(this.image.current, this)\n\n    // Get observer.\n    const intersectionObserver =\n      this.getIntersectionObserver({\n        root: this.props.root,\n        rootMargin: this.props.rootMargin,\n        thresholds: this.props.thresholds\n      })\n\n    // Add observer.\n    intersectionObserver.observe(this.image.current)\n\n    // Add events.\n    this.addEventListeners()\n  }\n\n  /**\n   * Clean up.\n   */\n  componentWillUnmount () {\n    // Get observer.\n    const intersectionObserver =\n      this.getIntersectionObserver({\n        root: this.props.root,\n        rootMargin: this.props.rootMargin,\n        thresholds: this.props.thresholds\n      })\n\n    // Remove observer.\n    intersectionObserver.unobserve(this.image.current)\n\n    // Remove events.\n    this.removeEventListeners()\n\n    // Clean up.\n    REACT_MAP.delete(this.image.current)\n  }\n\n  /**\n   * Runs after render.\n   */\n  componentDidUpdate (prevProps = {}) {\n    // New source?\n    if (this.props.src !== prevProps.src) {\n      // Remove events.\n      this.removeEventListeners()\n\n      // Set preloader source.\n      this.preloader.src = this.props.src\n\n      // Add events.\n      this.addEventListeners()\n    }\n\n    // New intersection?\n    if (\n      this.props.rootMargin !== prevProps.rootMargin ||\n      this.props.thresholds !== prevProps.thresholds\n    ) {\n      // Get observer.\n      const prevIntersectionObserver =\n        this.getIntersectionObserver({\n          root: prevProps.root,\n          rootMargin: prevProps.rootMargin,\n          thresholds: prevProps.thresholds\n        })\n\n      // Get observer.\n      const intersectionObserver =\n        this.getIntersectionObserver({\n          root: this.props.root,\n          rootMargin: this.props.rootMargin,\n          thresholds: this.props.thresholds\n        })\n\n      // Remove observer.\n      prevIntersectionObserver.unobserve(this.image.current)\n\n      // Add observer.\n      intersectionObserver.observe(this.image.current)\n    }\n  }\n\n  /**\n   * Add events.\n   */\n  addEventListeners () {\n    this.preloader.addEventListener('load', this.onPreloaderLoad)\n    this.preloader.addEventListener('error', this.onPreloaderError)\n  }\n\n  /**\n   * Remove events.\n   */\n  removeEventListeners () {\n    this.image.current.removeEventListener('load', this.onImageLoad)\n    this.preloader.removeEventListener('load', this.onPreloaderLoad)\n    this.preloader.removeEventListener('error', this.onPreloaderError)\n  }\n\n  /**\n   * Preloader load.\n   */\n  onPreloaderLoad () {\n    // Add event.\n    this.image.current.addEventListener('load', this.onImageLoad)\n\n    // Update source.\n    this.image.current.src = this.preloader.src\n  }\n\n  /**\n   * Preloader fail.\n   */\n  onPreloaderError () {\n    if (this.props.fallback) {\n      // Add event.\n      this.image.current.addEventListener('load', this.onImageLoad)\n\n      // Update source.\n      this.image.current.src = this.props.fallback\n    }\n  }\n\n  /**\n   * Image load.\n   */\n  onImageLoad (event) {\n    // Remove placeholder styles.\n    this.image.current.style.backgroundImage =\n      this.preservedStyle.backgroundImage\n\n    // Conditionally run load event.\n    if (this.image.current.src === this.props.src) {\n      this.props.onLoad(event)\n    }\n\n    // Conditionally run fallback event.\n    if (this.image.current.src === this.props.fallback) {\n      this.props.onFallback({\n        type: 'fallback',\n        target: this.image.current\n      })\n    }\n  }\n\n  /**\n   * Image intersection.\n   */\n  onIntersection () {\n    // Get background.\n    this.preservedStyle.backgroundImage =\n      this.image.current.style.backgroundImage\n\n    // Backgrounds.\n    const bg1 =\n      `url(${this.props.placeholder})`\n\n    const bg2 =\n      `url(${this.preservedStyle.backgroundImage})`\n\n    const both =\n      [bg1, bg2].join(',')\n\n    // Placeholder exists?\n    if (this.props.placeholder) {\n      // Set background.\n      this.image.current.style.backgroundImage = (\n        // Existing background?\n        this.preservedStyle.backgroundImage\n          ? both\n          : bg1\n      )\n    }\n\n    // Update source?\n    if (this.props.src) {\n      this.preloader.src = this.props.src\n    }\n\n    // Fire event.\n    this.props.onIntersection({\n      type: 'intersection',\n      target: this.image.current\n    })\n  }\n\n  /**\n   * Inline SVG with width and height.\n   *\n   * The width of the image.\n   * @param {Number|String} width\n   *\n   * The height of the image.\n   * @param {Number|String} height\n   *\n   * The inline SVG as a data source.\n   * @return {String}\n   */\n  getPreloaderSrc (width, height) {\n    const w = Number(width) || 0\n    const h = Number(height) || 0\n\n    // Expose SVG.\n    return (\n      `data:image/svg+xml,%3Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"${w}\" height=\"${h}\"%3E%3C/svg%3E`\n    )\n  }\n\n  /**\n  * Return a cached intersection observer.\n  *\n  * The rootMargin being used.\n  * @param {Number|String} rootMargin\n  *\n  * The thresholds being used.\n  * @param {Array|Number|String} thresholds\n  *\n  * The intersection observer.\n  * @return {String}\n  *\n  * See {@link https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API Intersection Observer API}\n  */\n  getIntersectionObserver ({ root, rootMargin, thresholds }) {\n    // Ensure node.\n    const base = (\n      root instanceof window.Node\n        ? root\n        : window\n    )\n\n    // Does cache exist?\n    if (!OBSERVERS.has(base)) {\n      OBSERVERS.set(base, {})\n    }\n\n    // Get cache.\n    const c = OBSERVERS.get(base)\n\n    // To string.\n    const strMargin = String(rootMargin)\n\n    // Set in conditional.\n    let list\n\n    // Array?\n    if (thresholds instanceof Array) {\n      list = thresholds\n\n      // Assume number/string.\n    } else {\n      list = (\n        String(thresholds)\n          .trim()\n          .split(/\\s+/)\n      )\n    }\n\n    // Convert to numeric array.\n    const normalizedThresholds =\n      list.map((threshold) => {\n        return Number(threshold) || 0\n      })\n\n    // Convert thresholds array into string.\n    const strThresholds =\n      normalizedThresholds.join(' ')\n\n    // Add layer?\n    if (!c[strMargin]) {\n      c[strMargin] = {}\n    }\n\n    // Does observer exist?\n    if (!c[strMargin][strThresholds]) {\n      // Callback.\n      const f = (entries = []) => {\n        // Loop through entries.\n        entries.forEach((entry = {}) => {\n          // Past threshold?\n          if (entry.intersectionRatio > 0) {\n            // Remove observer.\n            c[strMargin][strThresholds] &&\n            c[strMargin][strThresholds].unobserve(entry.target)\n\n            // Fire event.\n            REACT_MAP.has(entry.target) &&\n            REACT_MAP.get(entry.target).onIntersection()\n          }\n        })\n      }\n\n      // Options.\n      const options = {\n        root,\n        rootMargin: strMargin,\n        thresholds: normalizedThresholds\n      }\n\n      // Create observer.\n      c[strMargin][strThresholds] =\n        new window.IntersectionObserver(f, options)\n    }\n\n    // Expose observer.\n    return c[strMargin][strThresholds]\n  }\n\n  /**\n   * Renders image, placeholder, and fallback.\n   *\n   * @return {Image} - The image element.\n   * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img Image}.\n   */\n  render () {\n    // Get source.\n    const src =\n      this.getPreloaderSrc(\n        this.props.width,\n        this.props.height\n      )\n\n    // Props for image.\n    const propsForImage = {\n      src,\n      alt: this.props.alt,\n      height: this.props.height,\n      style: this.props.style,\n      width: this.props.width,\n\n      // Assign ref.\n      ref: this.image\n    }\n\n    // Expose UI.\n    return (\n      <img {...propsForImage} />\n    )\n  }\n}\n\n// Validation.\nImage.propTypes = {\n  /**\n   * The image URL.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The alternative text describing the image.\n   */\n  alt: PropTypes.string,\n\n  /**\n   * The placeholder image URL.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * The fallback image URL.\n   */\n  fallback: PropTypes.string,\n\n  /**\n   * The intrinsic width of the image in pixels.\n   */\n  width: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number\n  ]),\n\n  /**\n   * The intrinsic height of the image in pixels.\n   */\n  height: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number\n  ]),\n\n  /**\n   * The root element to check intersection.\n   *\n   * For the window's viewport, this should\n   * be left empty, and defaults to `null`.\n   */\n  root: PropTypes.object,\n\n  /**\n   * The amount to grow or shrink each side of\n   * the document when computing intersections.\n   */\n  rootMargin: PropTypes.string,\n\n  /**\n   * Inline style object, to force initial\n   * dimensions and proportions for image.\n   */\n  style: PropTypes.object,\n\n  /**\n   * A single number or array of numbers, indicating\n   * at what percentage of an image's visibility its\n   * observer's callback should be executed.\n   */\n  thresholds: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number\n      ])\n    ),\n    PropTypes.string,\n    PropTypes.number\n  ]),\n\n  /**\n   * Function that runs when image\n   * intersects with viewable area.\n   */\n  onIntersection: PropTypes.func,\n\n  /**\n   * Function that runs\n   * when image is loaded.\n   */\n  onLoad: PropTypes.func,\n\n  /**\n   * Function that runs when\n   * fallback image is loaded.\n   */\n  onFallback: PropTypes.func\n}\n\n// Defaults.\nImage.defaultProps = {\n  alt: '',\n  width: 0,\n  height: 0,\n  root: null,\n  rootMargin: '0px 0px 0px 0px',\n  thresholds: 0.01,\n\n  // Events.\n  onFallback: () => {},\n  onIntersection: () => {},\n  onLoad: () => {}\n}\n\n// Export.\nexport default Image\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz'\nimport Image from './'\n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"t7image\"}}>{`@t7/image`}</MDXTag>\n<PropsTable of={Image} />\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"basic-usage\"}}>{`Basic Usage`}</MDXTag>\n<Playground __position={1} __code={'<Image\\n  alt=\\\"IMAGE 1\\\"\\n  width=\\\"800\\\"\\n  height=\\\"200\\\"\\n  // Source.\\n  src=\\\"https://sloow.me/5000/placehold.it/800x200/69c/fff?text=IMAGE+1\\\"\\n  // Fallback source.\\n  fallback=\\\"https://placehold.it/800x200/69c/fff?text=IMAGE+1+FALLBACK\\\"\\n  style={{\\n    background: \\'#69c\\',\\n  }}\\n  // Intersection event.\\n  onIntersection={event => {\\n    if (window.console) {\\n      window.console.log(\\'IMAGE 1 INTERSECTION\\')\\n    }\\n  }}\\n  // Load event.\\n  onLoad={event => {\\n    if (window.console) {\\n      window.console.log(\\'IMAGE 1 LOADED\\')\\n    }\\n  }}\\n  // Fallback load event.\\n  onFallback={event => {\\n    if (window.console) {\\n      window.console.log(\\'IMAGE 1 FALLBACK LOADED\\')\\n    }\\n  }}\\n/>'} __scope={{props: this ? this.props : props,Image}}>\n  <Image\n    alt='IMAGE 1'\n    width='800'\n    height='200'\n// Source.\nsrc='https://sloow.me/5000/placehold.it/800x200/69c/fff?text=IMAGE+1'\n\n// Fallback source.\nfallback='https://placehold.it/800x200/69c/fff?text=IMAGE+1+FALLBACK'\n\nstyle={{\n  background: '#69c'\n}}\n\n// Intersection event.\nonIntersection={(event) => {\n  if (window.console) {\n    window.console.log('IMAGE 1 INTERSECTION')\n  }\n}}\n\n// Load event.\nonLoad={(event) => {\n  if (window.console) {\n    window.console.log('IMAGE 1 LOADED')\n  }\n}}\n\n// Fallback load event.\nonFallback={(event) => {\n  if (window.console) {\n    window.console.log('IMAGE 1 FALLBACK LOADED')\n  }\n}}\n  />\n</Playground>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}